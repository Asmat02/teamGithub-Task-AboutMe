{
	"info": {
		"_postman_id": "590f7262-5d05-4dcd-8160-40a2b89388da",
		"name": "API Training: First API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20964401"
	},
	"item": [
		{
			"name": "GET STATUS",
			"item": [
				{
					"name": "Get Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"// print any kind of variables/message on the screen\r",
									"console.log(response);\r",
									"console.log(response.message);\r",
									"\r",
									"pm.test(\"The message value of the test should be Welcome to the Simple Books API. \", function (){\r",
									"    pm.expect(response.message).to.eql(\"Welcome to the Simple Books API.\")\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{book url}}",
							"host": [
								"{{book url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "REGISTER AN API CLIENT",
			"item": [
				{
					"name": "Register an API Client Doyin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is \", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {\r",
									"    console.log(response.json());\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "1eea641b8c70d3a89c24f64ee8f6fee6f62089cca6648c0bce75dd9bb9ef9dd1",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"clientName\": \"Oyedoyinasmat\",\n   \"clientEmail\": \"Asmat123@mailinator.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{book url}}api-clients/",
							"host": [
								"{{book url}}api-clients"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GET BOOKS",
			"item": [
				{
					"name": "Get Books all-books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"confirm test result value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.value).to.eql();\r",
									"});\r",
									"var jsonData = pm.response.json();\r",
									"console.log(jsonData)\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book url}}books?type=",
							"host": [
								"{{book url}}books"
							],
							"query": [
								{
									"key": "type",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"confirm test result value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.value).to.eql();\r",
									"});\r",
									"var jsonData = pm.response.json();\r",
									"console.log(jsonData)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book url}}books",
							"host": [
								"{{book url}}books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Books non-fiction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"const response = pm.response.json();\r",
									"// print any kind of variables/message on the screen\r",
									"console.log(response[2].name);\r",
									"pm.test(\"Search for a book name called Viscount Who Loved Me\", function (){\r",
									"    pm.expect(response[3].name).to.eql(\"Viscount Who Loved Me\")\r",
									"});\r",
									"\r",
									"/*const Fiction = response.filter((book) => book.type === \"fiction\");\r",
									"console.log(Fiction)\r",
									"//Print out the id of a fiction book that is available called \"The Midnight Library\"*/\r",
									"\r",
									"const Fiction = response.filter((book) => book.type === \"fiction\" && book.available === true && book.name === \"Viscount Who Loved Me\")\r",
									"\r",
									"console.log(Fiction[0].id);\r",
									"\r",
									"pm.test(\"The id number of a fiction book that available with the name The Midnight Library is \" , function () {\r",
									"    pm.expect(Fiction[0].name).eql(\"Viscount Who Loved Me\")\r",
									"});\r",
									"\r",
									"pm.globals.set(\"bookId\", Fiction[0].id);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "2e5c4601ced21891e47862a4f85d3ea37d7797d8ca0185333e5f82ac0f6fcb83",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book url}}books?type=non-fiction",
							"host": [
								"{{book url}}books"
							],
							"query": [
								{
									"key": "type",
									"value": "non-fiction"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Books fiction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"const response = pm.response.json();\r",
									"// print any kind of variables/message on the screen\r",
									"console.log(response[2].name);\r",
									"pm.test(\"Search for a book name called Viscount Who Loved Me\", function (){\r",
									"    pm.expect(response[3].name).to.eql(\"Viscount Who Loved Me\")\r",
									"});\r",
									"\r",
									"/*const Fiction = response.filter((book) => book.type === \"fiction\");\r",
									"console.log(Fiction)\r",
									"//Print out the id of a fiction book that is available called \"The Midnight Library\"*/\r",
									"\r",
									"const Fiction = response.filter((book) => book.type === \"fiction\" && book.available === true && book.name === \"Viscount Who Loved Me\")\r",
									"\r",
									"console.log(Fiction[0].id);\r",
									"\r",
									"pm.test(\"The id number of a fiction book that available with the name The Midnight Library is \" , function () {\r",
									"    pm.expect(Fiction[0].name).eql(\"Viscount Who Loved Me\")\r",
									"});\r",
									"\r",
									"pm.globals.set(\"bookId\", Fiction[0].id);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book url}}books?type=fiction",
							"host": [
								"{{book url}}books"
							],
							"query": [
								{
									"key": "type",
									"value": "fiction"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GET A SINGLE BOOK",
			"item": [
				{
					"name": "Get a single book",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book url}}books/:bookId",
							"host": [
								"{{book url}}books"
							],
							"path": [
								":bookId"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "bookId",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a single book 2",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book url}}books/:bookId",
							"host": [
								"{{book url}}books"
							],
							"path": [
								":bookId"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "bookId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PLACE A BOOK ORDER",
			"item": [
				{
					"name": "Place a book order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const OrderId = pm.response.json();\r",
									"\r",
									"console.log(OrderId.orderId);\r",
									"pm.globals.set(\"OrderId\", OrderId.orderId);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "8e190e5bd54853a92cf426969709ae5abd8224c099f099a406a5ab4fc4a58504",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"bookId\": {{bookId}},\n  \"customerName\": \"Ola\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{book url}}orders",
							"host": [
								"{{book url}}orders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GET ALL ORDERS",
			"item": [
				{
					"name": "Get all orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "8e190e5bd54853a92cf426969709ae5abd8224c099f099a406a5ab4fc4a58504",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{book url}}orders",
							"host": [
								"{{book url}}orders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GET AN ORDER",
			"item": [
				{
					"name": "Get an order",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "8e190e5bd54853a92cf426969709ae5abd8224c099f099a406a5ab4fc4a58504",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerName\": \"John\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{book url}}orders/:orderId",
							"host": [
								"{{book url}}orders"
							],
							"path": [
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "Mo15FdTyeaVVFa_iiGTvQ"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "UPDATE AN ORDER",
			"item": [
				{
					"name": "Update an order",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "8e190e5bd54853a92cf426969709ae5abd8224c099f099a406a5ab4fc4a58504",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{book url}}orders/:orderId/",
							"host": [
								"{{book url}}orders"
							],
							"path": [
								":orderId",
								""
							],
							"variable": [
								{
									"key": "orderId",
									"value": "bCA55KT8ZfC2J48FZwPOY"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DELETE AN ORDER",
			"item": [
				{
					"name": "Delete an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string Not Found\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "1eea641b8c70d3a89c24f64ee8f6fee6f62089cca6648c0bce75dd9bb9ef9dd1",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{book url}}orders/:orderId",
							"host": [
								"{{book url}}orders"
							],
							"path": [
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "Mo15FdTyeaVVFa_iiGTvQ"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "book url",
			"value": "https://simple-books-api.glitch.me/",
			"type": "string"
		}
	]
}